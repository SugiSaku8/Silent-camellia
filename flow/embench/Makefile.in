
EMBENCH_DIR     = $(REPO_HOME)/extern/embench-iot
EMBENCH_BUILD   = $(REPO_WORK)/embench
EMBENCH_LOG     = $(EMBENCH_BUILD)

EMBENCH_LD      = $(REPO_HOME)/flow/embench/link.ld
EMBENCH_BOOT    = $(REPO_HOME)/flow/embench/boot.S

EMBENCH_CFLAGS  = "-march=rv64imac -O3 -mabi=lp64 -nostartfiles -c"
EMBENCH_LDFLAGS = "-march=rv64imac -O3 -mabi=lp64 -nostartfiles -T$(EMBENCH_LD)"
EMBENCH_ULIBS   = "$(EMBENCH_BOOT) -lm"

EMBENCH_BMARKS  = aha-mont64        \
                  crc32             \
                  cubic             \
                  edn               \
                  huffbench         \
                  matmult-int       \
                  minver            \
                  nbody             \
                  nettle-aes        \
                  nettle-sha256     \
                  nsichneu          \
                  picojpeg          \
                  qrduino           \
                  sglib-combined    \
                  slre              \
                  st                \
                  statemate         \
                  ud                \
                  wikisort

EMBENCH_BUILD_TARGETS   =
EMBENCH_RUN_TARGETS     =

EMBENCH_TIMEOUT  = 20000000
EMBENCH_SCALE_FACTOR = 1

EMBENCH_OBJCOPY_FLAGS = --change-addresses=0xFFFF0000

EMBENCH_PASS_ADDR= 0x10070
EMBENCH_FAIL_ADDR= 0x10068

EMBENCH_WAVES    = 0

build-embench-binaries:
	rm -rf $(EMBENCH_BUILD)/
	mkdir -p $(EMBENCH_BUILD)
	sed -i 's/define.*LOCAL_SCALE_FACTOR.*/define LOCAL_SCALE_FACTOR $(EMBENCH_SCALE_FACTOR)/' \
        `find $(EMBENCH_DIR)/src -name *.c`
	cd $(EMBENCH_DIR) &&                \
    ./build_all.py                      \
	    --builddir $(EMBENCH_BUILD)     \
	    --logdir $(EMBENCH_BUILD)       \
        --arch  riscv32                 \
        --chip  generic                 \
        --board ri5cyverilator          \
	    --cc    $(CC)                   \
        --cflags $(EMBENCH_CFLAGS)      \
        --ldflags $(EMBENCH_LDFLAGS)    \
        --user-libs $(EMBENCH_ULIBS)

#
# 1. Benchmark name
define map_embench_dir
$(EMBENCH_BUILD)/src/${1}
endef

#
# 1. Benchmark name
define map_embench_exe
$(call map_embench_dir,${1})/${1}
endef

#
# 1. Benchmark name
define map_embench_objdump
$(call map_embench_exe,${1}).dis
endef

#
# 1. Benchmark name
define map_embench_hex
$(call map_embench_dir,${1})/ram.hex
endef

#
# 1. Benchmark name
define map_embench_rom
$(call map_embench_dir,${1})/rom.hex
endef

#
# 1. Benchmark name
define map_embench_vcd
$(call map_embench_dir,${1})/${1}.vcd
endef

#
# 1. Benchmark name
# 2. EMBENCH_WAVES
ifeq ($(EMBENCH_WAVES),1)
define map_embench_waves_or_not
+WAVES=$(call map_embench_vcd,${1})
endef
endif

#
# 1. Benchmark name
define map_embench_log
$(call map_embench_dir,${1})/${1}.log
endef

#
# 1. Benchmark name
define map_embench_ccx_model
$(call map_embench_dir,${1})/verilated_ccx
endef

#
# 1. Benchmark name
define embench_add

$(call map_embench_objdump,${1}) : $(call map_embench_exe,${1})
	$(OBJDUMP) -D $${<} > $${@}

$(call map_embench_hex,${1}) : $(call map_embench_exe,${1})
	$(OBJCOPY) $(EMBENCH_OBJCOPY_FLAGS) -O verilog $${<} $${@}

run-embench-${1}: $(EXE_CCX) $(call map_embench_hex,${1}) $(CCX_UNIT_ROM_HEX) $(call map_embench_objdump,${1})
	cp $(CCX_UNIT_ROM_HEX) $(call map_embench_rom,${1})
	cp $(EXE_CCX) $(call map_embench_ccx_model,${1})
	cd $(call map_embench_dir,${1}) && \
    $(call map_embench_ccx_model,${1}) \
        +PASS_ADDR=$(EMBENCH_PASS_ADDR) \
        +FAIL_ADDR=$(EMBENCH_FAIL_ADDR) \
        +TIMEOUT=$(EMBENCH_TIMEOUT) $(call map_embench_waves_or_not,${1})

EMBENCH_BUILD_TARGETS += $(call map_embench_objdump,${1})
EMBENCH_BUILD_TARGETS += $(call map_embench_hex,${1})
EMBENCH_RUN_TARGETS   += run-embench-${1}

endef

$(foreach BM,$(EMBENCH_BMARKS),$(eval $(call embench_add,${BM})))

build-embench-targets: $(EMBENCH_BUILD_TARGETS)

run-embench-targets  : $(EMBENCH_RUN_TARGETS)

