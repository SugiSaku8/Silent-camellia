
CCX_UNIT_BUILD      = $(REPO_WORK)/ccx/unit
CCX_UNIT_ROOT       = $(REPO_HOME)/verif/ccx/unit

CCX_UNIT_ROM_SRC    = $(CCX_UNIT_ROOT)/share/boot.S
CCX_UNIT_ROM_LD     = $(REPO_HOME)/src/fsbl/fsbl.ld
CCX_UNIT_TESTS      = 
CCX_UNIT_TESTS_RUN  = 

CCX_UNIT_TESTS_CLEAN=

CCX_UNIT_OBJCOPY_FLAGS = --change-addresses=0xFFFF0000

CCX_UNIT_TIMEOUT    = 25000
CCX_UNIT_FAIL       = 0x00010086
CCX_UNIT_PASS       = 0x00010090

CCX_UNIT_RAM_LD     = $(CCX_UNIT_ROOT)/share/link-ram.ld

CCX_UNIT_CFLAGS     = -I$(CCX_UNIT_ROOT)/share
CCX_UNIT_CFLAGS    += -I$(REPO_HOME)/verif/share/unit
CCX_UNIT_CFLAGS    += -nostartfiles -O1
CCX_UNIT_CFLAGS    += -march=rv64imc -mabi=lp64
CCX_UNIT_CFLAGS    += -T $(CCX_UNIT_RAM_LD) 

CCX_ROM_UNIT_CFLAGS = -nostartfiles -O1 -nostdlib
CCX_ROM_UNIT_CFLAGS+= -march=rv64imc -mabi=lp64
CCX_ROM_UNIT_CFLAGS+= -T $(FSBL_LD)

CCX_UNIT_SRCS       = $(REPO_HOME)/verif/share/unit/boot.S \
                      $(REPO_HOME)/verif/share/unit/util.S \
                      $(REPO_HOME)/verif/share/unit/unit_test.c

define cxx_model
$(call unit_test_build_dir,ccx)/${1}/verilated_cxx
endef

define cxx_unit_rom_hex
$(call unit_test_build_dir,ccx)/${1}/rom.hex
endef

define ccx_unit_ram_hex
$(call unit_test_build_dir,ccx)/${1}/ram.hex
endef


CCX_UNIT_ROM_ELF    = $(call map_unit_test_elf,ccx,rom)
CCX_UNIT_ROM_OBJDUMP= $(call map_unit_test_objdump,ccx,rom)
CCX_UNIT_ROM_HEX    = $(call map_unit_test_hex,ccx,rom)

$(CCX_UNIT_ROM_ELF) : $(CCX_UNIT_ROM_SRC) ;
	@mkdir -p $(dir $(CCX_UNIT_ROM_ELF))
	$(CC) -Wall $(CCX_ROM_UNIT_CFLAGS) -o $@ $<

$(CCX_UNIT_ROM_OBJDUMP) : $(CCX_UNIT_ROM_ELF)
	$(OBJDUMP) -D $< > $@

$(CCX_UNIT_ROM_HEX) : $(CCX_UNIT_ROM_ELF)
	$(OBJCOPY) -O verilog $< $@

ccx-unit-fsbl : $(CCX_UNIT_ROM_ELF) $(CCX_UNIT_ROM_OBJDUMP) $(CCX_UNIT_ROM_HEX)

#
# 1. CCX unit test name
# 2. CCX unit test sources.
define add_ccx_unit_test

$(call build_unit_test,ccx,${1},${CCX_UNIT_CFLAGS},${CCX_UNIT_SRCS} ${2}, $(CCX_UNIT_OBJCOPY_FLAGS))

run-unit-ccx-${1} : $(call map_unit_test_hex,ccx,${1}) $(EXE_CCX) $(CCX_UNIT_ROM_HEX)
	cp $(CCX_UNIT_ROM_HEX) $(call cxx_unit_rom_hex,${1})
	cp $(EXE_CCX) $(call cxx_model,${1})
	cp $(call map_unit_test_hex,ccx,${1}) $(call ccx_unit_ram_hex,${1})
	cd $(dir $(call cxx_model,${1})) && \
	$(call cxx_model,${1}) \
	    +WAVES=$(call map_unit_test_vcd,ccx,${1}) \
	    +TIMEOUT=$(CCX_UNIT_TIMEOUT) \
	    +PASS_ADDR=$(CCX_UNIT_PASS) +FAIL_ADDR=$(CCX_UNIT_FAIL) 

UNIT_TEST_RUN_TARGETS += run-unit-ccx-${1}

endef

include $(CCX_UNIT_ROOT)/example/Makefile.in
include $(CCX_UNIT_ROOT)/access-traps/Makefile.in
include $(CCX_UNIT_ROOT)/wfi/Makefile.in
include $(CCX_UNIT_ROOT)/wfi-ld/Makefile.in
include $(CCX_UNIT_ROOT)/wfi-st/Makefile.in
include $(CCX_UNIT_ROOT)/wfi-br/Makefile.in
include $(CCX_UNIT_ROOT)/wfi-jal/Makefile.in
include $(CCX_UNIT_ROOT)/mtime-read/Makefile.in
include $(CCX_UNIT_ROOT)/mtime-write/Makefile.in
include $(CCX_UNIT_ROOT)/counters/Makefile.in
include $(CCX_UNIT_ROOT)/timer/Makefile.in
include $(CCX_UNIT_ROOT)/interrupts-enablebits/Makefile.in
include $(CCX_UNIT_ROOT)/interrupts-timer-direct/Makefile.in
include $(CCX_UNIT_ROOT)/interrupts-timer-vectored/Makefile.in
